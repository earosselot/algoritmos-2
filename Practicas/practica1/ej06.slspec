TAD ROSETREE(α)

    generos rt(α)

    observadores
        raiz: rt(α) ➝ α
        hijos: tr(α) ➝ secu(rt(α))

    generadores
        rose: α × secu(rt(α)) ➝ rt(α)

    axiomas ∀s: secu(rt(α)) ∀r: α
        raiz(rose(r, s)) ≡ r
        hijos(rose(r,s)) ≡ s

Fin TAD

∀s: secu(rt(α)) ∀r: α
a)  altura: rt(α) ➝ nat // TODO:

    altura(rose(r, s)) ≡ alturaMaxSecu(s) + 1

    alturaMaxSecu: secu(rt(α)) ➝ nat
    alturaMaxSecu(s) ≡ max(altura(prim(s))                   , alturaMaxSecu(fin(s)))
                     ≡ max(alturaMaxSecu(hijoas(prim(s))) + 1, max(altura(prim(fin(s))), alturaMaxSecu(fin(fin(s)))))
                        
    // TODO: esta bien esto ??

b)  #Hojas: rt(α) ➝ nat

    #Hojas(rose(r, s)) ≡
        IF vacia?(s)
            THEN 1
            ELSE #HojasSecu(s)
        FI

    #HojasSecu: secu(rt(α)) ➝ nat
    #HojasSecu(<>) ≡ <>
    #HojasSecu(s) ≡ 
        IF vacia?(hijos(prim(s)))
            THEN 1 + #HojasSecu(fin(s))
            ELSE #Hojas(prim(s)) + #HojasSecu(fin(s))
        FI
 
c)  podar: rt(α) ➝ rt(α)

    podar(rose(r, s)) ≡ 
        IF esHoja?(rose(r, s))
            THEN nil      //TODO: rosetree vacio ? sera nil ? 
            ELSE rose(r, podarSecu(s))
        FI
    
    podarSecu: secu(rt(α)) ➝ secu(rt(α))
    podarSecu(<>) ≡ <>
    podarSecu(s) ≡
        IF esHoja?(prim(s))
            THEN podarSecu(fin(s))
            ELSE podar(prim(s)) • podarSecu(fin(s))
        FI

    esHoja?(rose(r, s)) ≡ vacia?(s)

d)  ramasMaximoN: rt(α) × n ➝ secu(secu(α))  // TODO:
    // TODO: este no me salio ni obtener todas las ramas sin restriccion
    ramasMaximoN(rose(r, s), n) ≡ 
        
    obtenerRamas(rose(r, s)) ≡
        IF ¬esHoja(rose(r, s))
            THEN (r • obtenerRamas(prim(s))) • (r • obtenerRamasSecu(r, fin(s)))
            ELSE r
        FI

    obtenerRamasSecu: α × secu(rt(α)) ➝ secu(secu(α))
    obtenerRamasSecu(r, s) ≡
        IF vacia?(s)
            THEN <>
            ELSE (r • obtenerRamas(prim(s)))

            ELSE (r • (raiz(prim(s)) • obtenerRamas(prim(s)))) • obtenerRamasSecu(r, fin(s))
        FI


           rtA     rtB          rtC      rtD           rtE
    rtA = rose(a, rose(b, <>) • rose(c, rose(d, <>) • (rose(e, <>) • <> )))

    obtenerRamas(rtA) 
    ≡ (a • obtenerRamas(rtB)) • (obtenerRamasSecu(a, fin(hijos(rtA))))
    ≡ (a • b)                 • (obtenerRamasSecu(a, rtC • <>))
    ≡ (a • b)                 • (a • (raiz(prim(rtC)) • obtenerRamas(prim(rose(d, <>) • (rose(e, <>) • <> ))))) • obtenerRamasSecu(a, fin(rtC • <>))
    ≡ (a • b)                 • (a • (c • obtenerRamas(rose(d, <>))))
    ≡ (a • b)                 • (a • (c • d)) 


    OTRA VERSION (creo que esta mas cerca)

    obtenerRamas: rt(α) ➝ secu(secu(α))

    obtenerRamas(rose(r, s)) ≡
            IF esHoja?(rose(r, s))
                THEN (r • <>)
                ELSE obtenerRamasSecu(r, s)
            FI


    obtenerRamasSecu: α × secu(rt(α)) ➝ secu(secu(α))

    obtenerRamasSecu(r, s) ≡
            IF long(s) = 1 
                THEN (r • obtenerRamas(prim(s)))
                ELSE (r • obtenerRamas(prim(s))) • obtenerRamasSecu(r, fin(s))
            FI

        rtA
        rtB - rtC
              rtD - rtE

    rtA     rtB          rtC      rtD           rtE
    rtA = rose(a, rose(b, <>) • (rose(c, rose(d, <>) • (rose(e, <>) • <> )) • <>))

    oR(rtA)                                                                                                                                                                                                     {esHoja?(rt(α)) -> false}
    ≡ obtenerRamasSecu(a, rose(b, <>) • (rose(c, rose(d, <>) • (rose(e, <>) • <> )) • <>))                                                                                                                           {long(s) = 1  -> false}
    ≡ a • obtenerRamas(prim(rose(b, <>) • (rose(c, rose(d, <>) • (rose(e, <>) • <> )) • <>)))  • obtenerRamasSecu(a, fin(rose(b, <>) • (rose(c, rose(d, <>) • (rose(e, <>) • <> )) • <>)))
    ≡ a • obtenerRamas(rose(b, <>))                                                            • obtenerRamasSecu(a, rose(c, rose(d, <>) • (rose(e, <>) • <> )) • <>)                                                                                                  {esHoja?(rt(α)) -> true}
    ≡ a • (b • <>)                                                                             • obtenerRamasSecu(a, rose(c, rose(d, <>) • (rose(e, <>) • <> )) • <>)                                                                                                          {long(s) = 1  -> true}
    ≡ a • (b • <>)                                                                             • a • obtenerRamas(prim(rose(c, rose(d, <>) • (rose(e, <>) • <> )) • <>))
    ≡ a • (b • <>)                                                                             • a • obtenerRamas(rose(c, rose(d, <>) • (rose(e, <>) • <>)))                                                                                                                   {esHoja?(rt(α)) -> false}
    ≡ a • (b • <>)                                                                             • a • obtenerRamasSecu(c, rose(d, <>) • (rose(e, <>) • <>))                                                                                                                  {long(s) = 1  -> false}
    ≡ a • (b • <>)                                                                             • a • r              • obtenerRamas(prim(rose(d, <>) • (rose(e, <>) • <>))) • obtenerRamasSecu(c, fin(rose(d, <>) • (rose(e, <>) • <>)))       
    ≡ a • (b • <>)                                                                             • a • r              • obtenerRamas(rose(d, <>))                            • obtenerRamasSecu(c, (rose(e, <>) • <>))                                                                                               {esHoja?(rt(α)) -> true}
    ≡ a • (b • <>)                                                                             • a • (r • (d • <>))                                                        • obtenerRamasSecu(c, (rose(e, <>) • <>))                                                                                                                               {long(s) = 1  -> true}
    ≡ a • (b • <>)                                                                             • a • (r • (d • <>))                                                        • (c • obtenerRamas(prim(rose(e, <>) • <>)))
    ≡ a • (b • <>)                                                                             • a • (r • (d • <>))                                                        • (c • obtenerRamas(rose(e, <>)))                                                                                                                                      {esHoja?(rt(α)) -> true}
    ≡ a • (b • <>)                                                                             • a • (r • (d • <>))                                                        • (c • (e • <>))    


e)  enumerarNivelN: rt(α) × nat ➝ sec(α)

    enumerarNivelN(rose(r, s), k) ≡
        IF altura(rose(r, s)) < k
            THEN <>
            ELSE obtenerPrimerNodoNivelN(rose(r, s), k) 
                 & obtenerPrimerNodoNivelN(podarPrimerNodoNivelN(rose(r, s)), k)
        FI
    
    obtenerSecuPrimerNodoNivelN: rt(α) × nat ➝ secu(α)         {k > 0}

    obtenerSecuPrimerNodoNivelN(rose(r, s), k) ≡
        IF k = 1
            THEN raiz(prim(s)) • <>
            ELSE obtenerSecuPrimerNodoNivelN(prim(s), k - 1)
        FI
    
    podarPrimerNodoNivelN: rt(α) × nat k ➝ rt(α)     {k > 0}
    podarPrimerNodoNivelN(rose(r,s), k) ≡
        IF k = 1
            THEN nil
            ELSE rose(r, podarPrimerNodoNivelN(s, k-1))
        FI

    podarPrimerNodoNivelN(rose(r, <>), 1) ≡ nil

f)  ramasMasLargasConRepetidos: rt(α) ➝ secu(secu(α))  // TODO:

    // TODO: conjunto conj(α) o se refiere a "todas".
    // puede haber mas de una rama distinta, pero con los mismos valores
