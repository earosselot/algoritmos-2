TAD ROSETREE(α)

    generos rosetree(α)

    observadores
        raiz: rosetree(α) ➝ α
        hijos: rosetree(α) ➝ secu(rosetree(α))

    generadores
        rose: α × secu(rosetree(α)) ➝ rosetree(α)

    axiomas ∀s: secu(rosetree(α)) ∀r: α
        raiz(rose(r, s)) ≡ r
        hijos(rose(r, s)) ≡ s

Fin TAD

∀ rt : rosetree(α), ∀ s: secu(rosetree(α)), ∀ r: α
a)  altura : rosetree(α) ➝ nat 

    altura(rt) ≡
        IF vacia?(hijos(rt)) 
            THEN 1
            ELSE 1 + maxAlturaSecu(hijos(rt))
        FI

    maxAlturaSecu : secu(rosetree(α)) ➝ nat

    maxAlturaSecu(s) ≡ 
        IF vacia?(s)
            THEN 0
            ELSE max(altura(prim(s)), alturaMaxSecu(fin(s)))
        FI

b)  #Hojas: rosetree(α) ➝ nat

    #Hojas(rt) ≡
        if vacia?(hijos(rt))
            THEN 1
            ELSE #Hojas(prim(hijos(rt))) + #HojasSecu(fin(hijos(rt)))
        FI

    #HojasSecu : secu(rosetree(α)) ➝ nat

    #HojasSecu(s) ≡
        IF vacia?(s)
            THEN 0
            ELSE #Hojas(prim(s)) + #Hojas(fin(s))
        FI
 
c)  podar: rosetree(α) ➝ rosetree(α)   // TODO:

    podar(rt) ≡ 
        IF esHoja?(rt)
            THEN // TODO: aca que tengo que devolver???
            ELSE rose(raiz(rt), podar(prim(hijos(rt))) • podarSecu(fin(hijos(rt))))
        FI

    esHoja?(rt) ≡ vacia?(hijos(rt))

    podarSecu : secu(rosetree(α)) -> secu(rosetree(α))

    podarSecu(s) ≡ 
        IF vacia?(s)
            THEN <>
            ELSE podar(prim(s)) • podarSecu(fin(s))
        FI


d) ramasMaximoN: rosetree(α) × n ➝ secu(secu(α))

    ramasMaximoN(rt, k) ≡
        IF long(prim(obtenerRamas(rt))) < k
            THEN prim(obtenerRamas(rt)) • ramasMaximoN(fin(obtenerRamas(rt)))
            ELSE ramasMaximoN(fin(obtenerRamas(rt)))
        FI

    obtenerRamas : rosetree(α) ➝ secu(secu(α))

    obtenerRamas(rt) ≡
        IF esHoja?(rt)
            THEN < raiz(rt) • <> >
            ELSE (raiz(rt) • obtenerRamas(prim(hijos(rt)))) 
                    • (agregarRaizSecu(raiz(rt), obtenerRamasSecu(fin(hijos(rt)))))
        FI

    obtenerRamasSecu : secu(rosetree(α)) ➝ secu(secu(α))

    obtenerRamasSecu(s) ≡
        IF vacia?(s)
            THEN < <> >
            ELSE (obtenerRamas(prim(s)))
                    • obtenerRamasSecu(fin(s))   
        FI

    agregarRaizSecu : α × secu(secu(α)) ➝ secu(secu(α))

    agregarRaizSecu(r, s) ≡
        IF vacia?(s)
            THEN <<>>
            ELSE (r • prim(s)) • agregarRaizSecu(r, fin(s))
        FI

e)  enumerarNivelN: rt(α) × nat ➝ sec(α)

    enumerarNivelN(rose(r, s), k) ≡
        IF altura(rose(r, s)) < k
            THEN <>
            ELSE obtenerPrimerNodoNivelN(rose(r, s), k) 
                 & obtenerPrimerNodoNivelN(podarPrimerNodoNivelN(rose(r, s)), k)
        FI
    
    obtenerSecuPrimerNodoNivelN: rt(α) × nat ➝ secu(α)         {k > 0}

    obtenerSecuPrimerNodoNivelN(rose(r, s), k) ≡
        IF k = 1
            THEN raiz(prim(s)) • <>
            ELSE obtenerSecuPrimerNodoNivelN(prim(s), k - 1)
        FI
    
    podarPrimerNodoNivelN: rt(α) × nat k ➝ rt(α)     {k > 0}
    podarPrimerNodoNivelN(rose(r,s), k) ≡
        IF k = 1
            THEN nil
            ELSE rose(r, podarPrimerNodoNivelN(s, k-1))
        FI

    podarPrimerNodoNivelN(rose(r, <>), 1) ≡ nil

f)  ramasMasLargasConRepetidos: rt(α) ➝ secu(secu(α))  // TODO:

    // TODO: conjunto conj(α) o se refiere a "todas".
    // puede haber mas de una rama distinta, pero con los mismos valores
